// Autogenerated Jamon implementation
// /root/apps/test/jamon-dist-2013.12.28/./jamon/org/apache/hadoop/hbase/tmpl/regionserver/RegionListTmpl.jamon

package org.apache.hadoop.hbase.tmpl.regionserver;

// 24, 9
import java.util.*;
// 25, 9
import org.apache.commons.lang3.time.FastDateFormat;
// 26, 9
import org.apache.hadoop.hbase.regionserver.HRegionServer;
// 27, 9
import org.apache.hadoop.hbase.util.Bytes;
// 28, 9
import org.apache.hadoop.hbase.client.RegionInfo;
// 29, 9
import org.apache.hadoop.hbase.client.RegionInfoDisplay;
// 30, 9
import org.apache.hadoop.hbase.regionserver.Region;
// 31, 9
import org.apache.hadoop.hbase.ServerName;
// 32, 9
import org.apache.hadoop.hbase.HBaseConfiguration;
// 33, 9
import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;
// 34, 9
import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.ServerInfo;
// 35, 9
import org.apache.hadoop.hbase.shaded.protobuf.generated.ClusterStatusProtos.RegionLoad;
// 36, 9
import org.apache.hadoop.hbase.client.RegionReplicaUtil;
// 37, 9
import org.apache.hadoop.hbase.regionserver.MetricsRegionWrapper;
// 38, 9
import org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;

public class RegionListTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.Intf

{
  private final HRegionServer regionServer;
  private final List<RegionInfo> onlineRegions;
  protected static org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.ImplData p_implData)
  {
    return p_implData;
  }
  public RegionListTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    regionServer = p_implData.getRegionServer();
    onlineRegions = p_implData.getOnlineRegions();
  }
  
  @Override public void renderNoFlush(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 40, 1
    if ((onlineRegions != null && onlineRegions.size() > 0) )
    {
      // 40, 60
      jamonWriter.write("\r\n\r\n    ");
      // 42, 5
      
        Collections.sort(onlineRegions, RegionInfo.COMPARATOR);
    
      // 46, 5
      jamonWriter.write("<div class=\"tabbable\">\r\n        <ul class=\"nav nav-pills\">\r\n            <li class=\"active\"><a href=\"#tab_regionBaseInfo\" data-toggle=\"tab\">Base Info</a> </li>\r\n            <li><a href=\"#tab_regionRequestStats\" data-toggle=\"tab\">Request metrics</a></li>\r\n            <li class=\"\"><a href=\"#tab_regionStoreStats\" data-toggle=\"tab\">Storefile Metrics</a></li>\r\n            <li class=\"\"><a href=\"#tab_regionMemstoreStats\" data-toggle=\"tab\">Memstore Metrics</a></li>\r\n            <li class=\"\"><a href=\"#tab_regionCompactStats\" data-toggle=\"tab\">Compaction Metrics</a></li>\r\n        </ul>\r\n        <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\r\n            <div class=\"tab-pane active\" id=\"tab_regionBaseInfo\">\r\n                ");
      // 56, 17
      {
        // 56, 17
        __jamon_innerUnit__baseInfo(jamonWriter, onlineRegions);
      }
      // 56, 63
      jamonWriter.write("\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"tab_regionRequestStats\">\r\n                ");
      // 59, 17
      {
        // 59, 17
        __jamon_innerUnit__requestStats(jamonWriter, onlineRegions);
      }
      // 59, 67
      jamonWriter.write("\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"tab_regionStoreStats\">\r\n                ");
      // 62, 17
      {
        // 62, 17
        __jamon_innerUnit__storeStats(jamonWriter, onlineRegions);
      }
      // 62, 65
      jamonWriter.write("\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"tab_regionMemstoreStats\">\r\n                ");
      // 65, 17
      {
        // 65, 17
        __jamon_innerUnit__memstoreStats(jamonWriter, onlineRegions);
      }
      // 65, 68
      jamonWriter.write("\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"tab_regionCompactStats\">\r\n                ");
      // 68, 17
      {
        // 68, 17
        __jamon_innerUnit__compactStats(jamonWriter, onlineRegions);
      }
      // 68, 67
      jamonWriter.write("\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <p>Region names are made of the containing table's name, a comma,\r\n    the start key, a comma, and a randomly generated region id.  To illustrate,\r\n    the region named\r\n    <em>domains,apache.org,5464829424211263407</em> is party to the table\r\n    <em>domains</em>, has an id of <em>5464829424211263407</em> and the first key\r\n    in the region is <em>apache.org</em>.  The <em>hbase:meta</em> 'table' is an internal\r\n    system table (or a 'catalog' table in db-speak).\r\n    The hbase:meta table keeps a list of all regions in the system. The empty key is used to denote\r\n    table start and table end.  A region with an empty start key is the first region in a table.\r\n    If a region has both an empty start key and an empty end key, it's the only region in the\r\n    table. See <a href=\"http://hbase.apache.org\">HBase Home</a> for further explication.<p>\r\n");
    }
    // 83, 1
    else
    {
      // 83, 8
      jamonWriter.write("\r\n    <p>Not serving regions</p>\r\n");
    }
    // 85, 7
    jamonWriter.write("\r\n\r\n");
  }
  
  
  // 87, 1
  private void __jamon_innerUnit__baseInfo(final java.io.Writer jamonWriter, final List<RegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 91, 5
    jamonWriter.write("<table id=\"baseStatsTable\" class=\"tablesorter table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th>Region Name</th>\r\n            <th>Start Key</th>\r\n            <th>End Key</th>\r\n            <th>ReplicaID</th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        ");
    // 102, 9
    for (RegionInfo r: onlineRegions )
    {
      // 102, 45
      jamonWriter.write("\r\n        <tr>\r\n            ");
      // 104, 13
      
             String displayName = RegionInfoDisplay.getRegionNameAsStringForDisplay(r,
               regionServer.getConfiguration());
            
      // 108, 13
      jamonWriter.write("<td><a href=\"region.jsp?name=");
      // 108, 42
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getEncodedName()), jamonWriter);
      // 108, 66
      jamonWriter.write("\">");
      // 108, 68
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(displayName), jamonWriter);
      // 108, 85
      jamonWriter.write("</a></td>\r\n            <td>");
      // 109, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toStringBinary(RegionInfoDisplay.getStartKeyForDisplay(r,
                                        regionServer.getConfiguration()))), jamonWriter);
      // 110, 77
      jamonWriter.write("</td>\r\n            <td>");
      // 111, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toStringBinary(RegionInfoDisplay.getEndKeyForDisplay(r,
                                        regionServer.getConfiguration()))), jamonWriter);
      // 112, 77
      jamonWriter.write("</td>\r\n            <td>");
      // 113, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getReplicaId()), jamonWriter);
      // 113, 39
      jamonWriter.write("</td>\r\n        </tr>\r\n        ");
    }
    // 115, 16
    jamonWriter.write("\r\n    </tbody>\r\n    </table>\r\n");
  }
  
  
  // 228, 1
  private void __jamon_innerUnit__compactStats(final java.io.Writer jamonWriter, final List<RegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 232, 5
    jamonWriter.write("<table id=\"compactionStatsTable\" class=\"tablesorter table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th>Region Name</th>\r\n            <th>Num. Compacting Cells</th>\r\n            <th>Num. Compacted Cells</th>\r\n            <th>Compaction Progress</th>\r\n            <th data-date-format=\"yyyymmdd hhmm zz\">Last Major Compaction</th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        ");
    // 244, 9
    for (RegionInfo r: onlineRegions )
    {
      // 244, 45
      jamonWriter.write("\r\n\r\n        <tr>\r\n        ");
      // 247, 9
      
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
            String percentDone = "";
            String compactTime = "";
            if  (load != null) {
              if (load.getTotalCompactingKVs() > 0) {
                percentDone = String.format("%.2f", 100 *
                    ((float) load.getCurrentCompactedKVs() / load.getTotalCompactingKVs())) + "%";
              }
              if (load.getLastMajorCompactionTs() > 0) {
                FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd HH:mm (ZZ)");
                compactTime = fdf.format(load.getLastMajorCompactionTs());
              }
            }
            String displayName = RegionInfoDisplay.getRegionNameAsStringForDisplay(r,
              regionServer.getConfiguration());
        
      // 264, 13
      jamonWriter.write("<td><a href=\"region.jsp?name=");
      // 264, 42
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getEncodedName()), jamonWriter);
      // 264, 66
      jamonWriter.write("\">");
      // 264, 68
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(displayName), jamonWriter);
      // 264, 85
      jamonWriter.write("</a></td>\r\n            ");
      // 265, 13
      if (load != null )
      {
        // 265, 33
        jamonWriter.write("\r\n            <td>");
        // 266, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getTotalCompactingKVs()), jamonWriter);
        // 266, 51
        jamonWriter.write("</td>\r\n            <td>");
        // 267, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getCurrentCompactedKVs()), jamonWriter);
        // 267, 52
        jamonWriter.write("</td>\r\n            <td>");
        // 268, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(percentDone), jamonWriter);
        // 268, 34
        jamonWriter.write("</td>\r\n            <td>");
        // 269, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(compactTime), jamonWriter);
        // 269, 34
        jamonWriter.write("</td>\r\n            ");
      }
      // 270, 19
      jamonWriter.write("\r\n        </tr>\r\n        ");
    }
    // 272, 16
    jamonWriter.write("\r\n    </tbody>\r\n    </table>\r\n");
  }
  
  
  // 277, 1
  private void __jamon_innerUnit__memstoreStats(final java.io.Writer jamonWriter, final List<RegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 281, 5
    jamonWriter.write("<table id=\"memstoreStatsTable\" class=\"tablesorter table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th>Region Name</th>\r\n            <th>Memstore Size</th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        ");
    // 290, 9
    for (RegionInfo r: onlineRegions )
    {
      // 290, 45
      jamonWriter.write("\r\n\r\n        <tr>\r\n        ");
      // 293, 9
      
            final String ZEROMB = "0 MB";
            String memStoreSizeMBStr = ZEROMB;
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
            String displayName = RegionInfoDisplay.getRegionNameAsStringForDisplay(r,
              regionServer.getConfiguration());
              if (load != null) {
              long memStoreSizeMB = load.getMemStoreSizeMB();
              if (memStoreSizeMB > 0) {
              memStoreSizeMBStr = TraditionalBinaryPrefix.long2String(
                         memStoreSizeMB * TraditionalBinaryPrefix.MEGA.value, "B", 1);
               }
             }
        
      // 307, 13
      jamonWriter.write("<td><a href=\"region.jsp?name=");
      // 307, 42
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getEncodedName()), jamonWriter);
      // 307, 66
      jamonWriter.write("\">");
      // 307, 68
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(displayName), jamonWriter);
      // 307, 85
      jamonWriter.write("</a></td>\r\n            ");
      // 308, 13
      if (load != null )
      {
        // 308, 33
        jamonWriter.write("\r\n            <td>");
        // 309, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(memStoreSizeMBStr), jamonWriter);
        // 309, 40
        jamonWriter.write("</td>\r\n            ");
      }
      // 310, 19
      jamonWriter.write("\r\n        </tr>\r\n        ");
    }
    // 312, 16
    jamonWriter.write("\r\n    </tbody>\r\n    </table>\r\n");
  }
  
  
  // 120, 1
  private void __jamon_innerUnit__requestStats(final java.io.Writer jamonWriter, final List<RegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 124, 5
    jamonWriter.write("<table id=\"requestStatsTable\" class=\"tablesorter table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th>Region Name</th>\r\n            <th>Read Request Count</th>\r\n            <th>Filtered Read Request Count</th>\r\n            <th>Write Request Count</th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        ");
    // 135, 9
    for (RegionInfo r: onlineRegions )
    {
      // 135, 45
      jamonWriter.write("\r\n\r\n        <tr>\r\n        ");
      // 138, 9
      
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
            String displayName = RegionInfoDisplay.getRegionNameAsStringForDisplay(r,
              regionServer.getConfiguration());
        
      // 143, 13
      jamonWriter.write("<td><a href=\"region.jsp?name=");
      // 143, 42
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getEncodedName()), jamonWriter);
      // 143, 66
      jamonWriter.write("\">");
      // 143, 68
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(displayName), jamonWriter);
      // 143, 85
      jamonWriter.write("</a></td>\r\n            ");
      // 144, 13
      if (load != null )
      {
        // 144, 33
        jamonWriter.write("\r\n            <td>");
        // 145, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getReadRequestsCount()), jamonWriter);
        // 145, 50
        jamonWriter.write("</td>\r\n            <td>");
        // 146, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getFilteredReadRequestsCount()), jamonWriter);
        // 146, 58
        jamonWriter.write("</td>\r\n            <td>");
        // 147, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getWriteRequestsCount()), jamonWriter);
        // 147, 51
        jamonWriter.write("</td>\r\n            ");
      }
      // 148, 19
      jamonWriter.write("\r\n        </tr>\r\n        ");
    }
    // 150, 16
    jamonWriter.write("\r\n    </tbody>\r\n    </table>\r\n");
  }
  
  
  // 156, 1
  private void __jamon_innerUnit__storeStats(final java.io.Writer jamonWriter, final List<RegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 160, 5
    jamonWriter.write("<table id=\"storeStatsTable\" class=\"tablesorter table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th>Region Name</th>\r\n            <th>Num. Stores</th>\r\n            <th>Num. Storefiles</th>\r\n            <th>Storefile Size Uncompressed</th>\r\n            <th>Storefile Size</th>\r\n            <th>Index Size</th>\r\n            <th>Bloom Size</th>\r\n            <th>Data Locality</th>\r\n        </tr>\r\n    </thead>\r\n\r\n    <tbody>\r\n        ");
    // 175, 9
    for (RegionInfo r: onlineRegions )
    {
      // 175, 45
      jamonWriter.write("\r\n\r\n        <tr>\r\n        ");
      // 178, 9
      
            final String ZEROMB = "0 MB";
            final String ZEROKB = "0 KB";
            String uncompressedStorefileSizeStr = ZEROMB;
            String storefileSizeStr = ZEROMB;
            String indexSizeStr = ZEROKB;
            String bloomSizeStr = ZEROKB;
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
            String displayName = RegionInfoDisplay.getRegionNameAsStringForDisplay(r,
              regionServer.getConfiguration());
             if (load != null) {
             long uncompressedStorefileSize  = load.getStoreUncompressedSizeMB();
             long storefileSize  = load.getStorefileSizeMB();
             long indexSize  = load.getTotalStaticIndexSizeKB();
             long bloomSize  = load.getTotalStaticBloomSizeKB();
             if (uncompressedStorefileSize > 0) {
                uncompressedStorefileSizeStr = TraditionalBinaryPrefix.long2String(
                    uncompressedStorefileSize * TraditionalBinaryPrefix.MEGA.value, "B", 1);
             }
             if (storefileSize > 0) {
                storefileSizeStr = TraditionalBinaryPrefix.long2String(storefileSize
                             * TraditionalBinaryPrefix.MEGA.value, "B", 1);
             }
             if(indexSize > 0) {
               indexSizeStr = TraditionalBinaryPrefix.long2String(indexSize
                                              * TraditionalBinaryPrefix.KILO.value, "B", 1);
             }
             if (bloomSize > 0) {
               bloomSizeStr = TraditionalBinaryPrefix.long2String(bloomSize
                                              * TraditionalBinaryPrefix.KILO.value, "B", 1);
              }
           }
        
      // 211, 13
      jamonWriter.write("<td><a href=\"region.jsp?name=");
      // 211, 42
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getEncodedName()), jamonWriter);
      // 211, 66
      jamonWriter.write("\">");
      // 211, 68
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(displayName), jamonWriter);
      // 211, 85
      jamonWriter.write("</a></td>\r\n            ");
      // 212, 13
      if (load != null )
      {
        // 212, 33
        jamonWriter.write("\r\n            <td>");
        // 213, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getStores()), jamonWriter);
        // 213, 39
        jamonWriter.write("</td>\r\n            <td>");
        // 214, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getStorefiles()), jamonWriter);
        // 214, 43
        jamonWriter.write("</td>\r\n            <td>");
        // 215, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(uncompressedStorefileSizeStr), jamonWriter);
        // 215, 51
        jamonWriter.write("</td>\r\n            <td>");
        // 216, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(storefileSizeStr), jamonWriter);
        // 216, 39
        jamonWriter.write("</td>\r\n            <td>");
        // 217, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(indexSizeStr), jamonWriter);
        // 217, 35
        jamonWriter.write("</td>\r\n            <td>");
        // 218, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(bloomSizeStr), jamonWriter);
        // 218, 35
        jamonWriter.write("</td>\r\n            <td>");
        // 219, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getDataLocality()), jamonWriter);
        // 219, 45
        jamonWriter.write("</td>\r\n            ");
      }
      // 220, 19
      jamonWriter.write("\r\n        </tr>\r\n        ");
    }
    // 222, 16
    jamonWriter.write("\r\n    </tbody>\r\n    </table>\r\n");
  }
  
  
}
