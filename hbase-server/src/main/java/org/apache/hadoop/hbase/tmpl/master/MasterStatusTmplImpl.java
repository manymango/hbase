// Autogenerated Jamon implementation
// /root/apps/test/jamon-dist-2013.12.28/./jamon/org/apache/hadoop/hbase/tmpl/master/MasterStatusTmpl.jamon

package org.apache.hadoop.hbase.tmpl.master;

// 32, 1
import java.util.*;
// 33, 1
import java.io.IOException;
// 34, 1
import org.apache.hadoop.hbase.client.replication.ReplicationPeerConfigUtil;
// 35, 1
import org.apache.hadoop.hbase.client.RegionInfo;
// 36, 1
import org.apache.hadoop.hbase.client.TableDescriptor;
// 37, 1
import org.apache.hadoop.hbase.replication.ReplicationPeerConfig;
// 38, 1
import org.apache.hadoop.hbase.replication.ReplicationPeerDescription;
// 39, 1
import org.apache.hadoop.hbase.HBaseConfiguration;
// 40, 1
import org.apache.hadoop.hbase.HConstants;
// 41, 1
import org.apache.hadoop.hbase.HTableDescriptor;
// 42, 1
import org.apache.hadoop.hbase.NamespaceDescriptor;
// 43, 1
import org.apache.hadoop.hbase.ServerName;
// 44, 1
import org.apache.hadoop.hbase.TableName;
// 45, 1
import org.apache.hadoop.hbase.client.Admin;
// 46, 1
import org.apache.hadoop.hbase.client.MasterSwitchType;
// 47, 1
import org.apache.hadoop.hbase.client.TableState;
// 48, 1
import org.apache.hadoop.hbase.master.assignment.AssignmentManager;
// 49, 1
import org.apache.hadoop.hbase.master.DeadServer;
// 50, 1
import org.apache.hadoop.hbase.master.HMaster;
// 51, 1
import org.apache.hadoop.hbase.master.RegionState;
// 52, 1
import org.apache.hadoop.hbase.master.ServerManager;
// 53, 1
import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
// 54, 1
import org.apache.hadoop.hbase.quotas.QuotaUtil;
// 55, 1
import org.apache.hadoop.hbase.security.access.PermissionStorage;
// 56, 1
import org.apache.hadoop.hbase.security.visibility.VisibilityConstants;
// 57, 1
import org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription;
// 58, 1
import org.apache.hadoop.hbase.tool.CanaryTool;
// 59, 1
import org.apache.hadoop.hbase.util.Bytes;
// 60, 1
import org.apache.hadoop.hbase.util.FSUtils;
// 61, 1
import org.apache.hadoop.hbase.util.JvmVersion;
// 62, 1
import org.apache.hadoop.util.StringUtils;

public class MasterStatusTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.Intf

{
  private final HMaster master;
  private final AssignmentManager assignmentManager;
  private final boolean catalogJanitorEnabled;
  private final Set<ServerName> deadServers;
  private final String filter;
  private final String format;
  private final Map<String,Integer> frags;
  private final ServerName metaLocation;
  private final ServerManager serverManager;
  private final List<ServerName> servers;
  // 74, 1
  
  public String formatZKString() {
    StringBuilder quorums = new StringBuilder();
    String zkQuorum = master.getZooKeeper().getQuorum();

    if (null == zkQuorum) {
      return quorums.toString();
    }

    String[] zks = zkQuorum.split(",");

    if (zks.length == 0) {
      return quorums.toString();
    }

    for(int i = 0; i < zks.length; ++i) {
      quorums.append(zks[i].trim());

      if (i != (zks.length - 1)) {
        quorums.append("<br/>");
      }
    }

    return quorums.toString();
  }

  // 101, 1
  
  public static String getUserTables(HMaster master, List<TableDescriptor> tables){
    if (master.isInitialized()){
      try {
        Map<String, TableDescriptor> descriptorMap = master.getTableDescriptors().getAll();
        if (descriptorMap != null) {
          for (TableDescriptor desc : descriptorMap.values()) {
            if (!desc.getTableName().isSystemTable()) {
             tables.add(desc);
            }
          }
        }
      } catch (IOException e) {
        return "Got user tables error, " + e.getMessage();
      }
    }
    return null;
  }

  protected static org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData p_implData)
  {
    if(! p_implData.getAssignmentManager__IsNotDefault())
    {
      p_implData.setAssignmentManager(null);
    }
    if(! p_implData.getCatalogJanitorEnabled__IsNotDefault())
    {
      p_implData.setCatalogJanitorEnabled(true);
    }
    if(! p_implData.getDeadServers__IsNotDefault())
    {
      p_implData.setDeadServers(null);
    }
    if(! p_implData.getFilter__IsNotDefault())
    {
      p_implData.setFilter("general");
    }
    if(! p_implData.getFormat__IsNotDefault())
    {
      p_implData.setFormat("html");
    }
    if(! p_implData.getFrags__IsNotDefault())
    {
      p_implData.setFrags(null);
    }
    if(! p_implData.getMetaLocation__IsNotDefault())
    {
      p_implData.setMetaLocation(null);
    }
    if(! p_implData.getServerManager__IsNotDefault())
    {
      p_implData.setServerManager(null);
    }
    if(! p_implData.getServers__IsNotDefault())
    {
      p_implData.setServers(null);
    }
    return p_implData;
  }
  public MasterStatusTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    master = p_implData.getMaster();
    assignmentManager = p_implData.getAssignmentManager();
    catalogJanitorEnabled = p_implData.getCatalogJanitorEnabled();
    deadServers = p_implData.getDeadServers();
    filter = p_implData.getFilter();
    format = p_implData.getFormat();
    frags = p_implData.getFrags();
    metaLocation = p_implData.getMetaLocation();
    serverManager = p_implData.getServerManager();
    servers = p_implData.getServers();
  }
  
  @Override public void renderNoFlush(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 65, 1
    if (format.equals("json") )
    {
      // 65, 30
      jamonWriter.write("\r\n  ");
      // 66, 3
      {
        org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl __jamon__var_0 = new org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl(this.getTemplateManager());
        __jamon__var_0.setFilter(filter);
        __jamon__var_0.setFormat("json" );
        __jamon__var_0.renderNoFlush(jamonWriter);
      }
      // 66, 68
      jamonWriter.write("\r\n  ");
      // 67, 3
      return; 
    }
    // 68, 7
    jamonWriter.write("\r\n");
    // 69, 1
    
ServerManager serverManager = master.getServerManager();
AssignmentManager assignmentManager = master.getAssignmentManager();

    // 121, 1
    jamonWriter.write("<!DOCTYPE html>\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <title>");
    // 126, 12
    if (master.isActiveMaster() )
    {
      // 126, 43
      jamonWriter.write("Master: ");
    }
    // 126, 51
    else
    {
      // 126, 58
      jamonWriter.write("Backup Master: ");
    }
    // 126, 79
    jamonWriter.write("\r\n    ");
    // 127, 5
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName().getHostname()), jamonWriter);
    // 127, 47
    jamonWriter.write("</title>\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta name=\"description\" content=\"\">\r\n    <link href=\"/static/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n    <link href=\"/static/css/bootstrap-theme.min.css\" rel=\"stylesheet\">\r\n    <link href=\"/static/css/hbase.css\" rel=\"stylesheet\">\r\n  </head>\r\n\r\n  <body>\r\n\r\n    <div class=\"navbar  navbar-fixed-top navbar-default\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                </button>\r\n                <a class=\"navbar-brand\" href=\"/master-status\"><img src=\"/static/hbase_logo_small.png\" alt=\"HBase Logo\"/></a>\r\n            </div>\r\n            <div class=\"collapse navbar-collapse\">\r\n                <ul class=\"nav navbar-nav\">\r\n                <li class=\"active\"><a href=\"/master-status\">Home</a></li>\r\n                <li><a href=\"/tablesDetailed.jsp\">Table Details</a></li>\r\n                ");
    // 151, 17
    if (master.isActiveMaster() )
    {
      // 151, 48
      jamonWriter.write("\r\n                    <li><a href=\"/procedures.jsp\">Procedures &amp; Locks</a></li>\r\n                    <li><a href=\"/hbck.jsp\">HBCK Report</a></li>\r\n                    ");
      // 154, 21
      if (master.getConfiguration().getBoolean(QuotaUtil.QUOTA_CONF_KEY, false) )
      {
        // 154, 98
        jamonWriter.write("\r\n                        <li><a href=\"/quotas.jsp\">Quotas</a></li>\r\n                    ");
      }
      // 156, 27
      jamonWriter.write("\r\n                ");
    }
    // 157, 23
    jamonWriter.write("\r\n                <li><a href=\"/processMaster.jsp\">Process Metrics</a></li>\r\n                <li><a href=\"/logs/\">Local Logs</a></li>\r\n                <li><a href=\"/logLevel\">Log Level</a></li>\r\n                <li><a href=\"/dump\">Debug Dump</a></li>\r\n                <li><a href=\"/jmx\">Metrics Dump</a></li>\r\n                <li><a href=\"/prof\">Profiler</a></li>\r\n                ");
    // 164, 17
    if (HBaseConfiguration.isShowConfInServlet())
    {
      // 164, 64
      jamonWriter.write("\r\n                <li><a href=\"/conf\">HBase Configuration</a></li>\r\n                ");
    }
    // 166, 23
    jamonWriter.write("\r\n               </ul>\r\n            </div><!--/.nav-collapse -->\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"container-fluid content\">\r\n\t");
    // 173, 2
    if (master.isActiveMaster() )
    {
      // 173, 33
      jamonWriter.write("\r\n        <div class=\"row inner_header\">\r\n            <div class=\"page-header\">\r\n                <h1>Master <small>");
      // 176, 35
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName().getHostname()), jamonWriter);
      // 176, 77
      jamonWriter.write("</small></h1>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n        <!-- Various warnings that cluster admins should be aware of -->\r\n        ");
      // 182, 9
      if (JvmVersion.isBadJvmVersion() )
      {
        // 182, 45
        jamonWriter.write("\r\n          <div class=\"alert alert-error\">\r\n          Your current JVM version ");
        // 184, 36
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(System.getProperty("java.version")), jamonWriter);
        // 184, 76
        jamonWriter.write(" is known to be\r\n          unstable with HBase. Please see the\r\n          <a href=\"http://hbase.apache.org/book.html#trouble.log.gc\">HBase Reference Guide</a>\r\n          for details.\r\n          </div>\r\n        ");
      }
      // 189, 15
      jamonWriter.write("\r\n        ");
      // 190, 9
      if (master.isInitialized() && !catalogJanitorEnabled )
      {
        // 190, 65
        jamonWriter.write("\r\n          <div class=\"alert alert-error\">\r\n          Please note that your cluster is running with the CatalogJanitor disabled. It can be\r\n          re-enabled from the hbase shell by running the command 'catalogjanitor_switch true'\r\n          </div>\r\n        ");
      }
      // 195, 15
      jamonWriter.write("\r\n        ");
      // 196, 9
      if (master.isInMaintenanceMode() )
      {
        // 196, 45
        jamonWriter.write("\r\n          <div class=\"alert alert-warning\">\r\n          Your Master is in maintenance mode. This is because hbase.master.maintenance_mode is\r\n          set to true. Under the maintenance mode, no quota or no Master coprocessor is loaded.\r\n          </div>\r\n        ");
      }
      // 201, 15
      jamonWriter.write("\r\n        ");
      // 202, 9
      if (!master.isBalancerOn() )
      {
        // 202, 39
        jamonWriter.write("\r\n          <div class=\"alert alert-warning\">\r\n            The Load Balancer is not enabled which will eventually cause performance degradation\r\n            in HBase as Regions will not be distributed across all RegionServers. The balancer\r\n            is only expected to be disabled during rolling upgrade scenarios.\r\n          </div>\r\n        ");
      }
      // 208, 15
      jamonWriter.write("\r\n        ");
      // 209, 9
      if (!master.isSplitOrMergeEnabled(MasterSwitchType.SPLIT) )
      {
        // 209, 70
        jamonWriter.write("\r\n          <div class=\"alert alert-warning\">\r\n            Region splits are disabled. This may be the result of HBCK aborting while\r\n            running in repair mode. Manually enable splits from the HBase shell,\r\n            or re-run HBCK in repair mode.\r\n          </div>\r\n        ");
      }
      // 215, 15
      jamonWriter.write("\r\n        ");
      // 216, 9
      if (!master.isSplitOrMergeEnabled(MasterSwitchType.MERGE) )
      {
        // 216, 70
        jamonWriter.write("\r\n          <div class=\"alert alert-warning\">\r\n            Region merges are disabled. This may be the result of HBCK aborting while\r\n            running in repair mode. Manually enable merges from the HBase shell,\r\n            or re-run HBCK in repair mode.\r\n          </div>\r\n        ");
      }
      // 222, 15
      jamonWriter.write("\r\n        ");
      // 223, 9
      if (master.getAssignmentManager() != null )
      {
        // 223, 54
        jamonWriter.write("\r\n          ");
        // 224, 11
        {
          org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl __jamon__var_1 = new org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl(this.getTemplateManager());
          __jamon__var_1.renderNoFlush(jamonWriter, master.getAssignmentManager());
        }
        // 224, 92
        jamonWriter.write("\r\n        ");
      }
      // 225, 15
      jamonWriter.write("\r\n        ");
      // 226, 9
      if (!master.isInMaintenanceMode() )
      {
        // 226, 46
        jamonWriter.write("\r\n          ");
        // 227, 11
        if (master.getMasterCoprocessorHost().findCoprocessor("RSGroupAdminEndpoint") != null &&
            serverManager.getOnlineServersList().size() > 0 )
        {
          // 228, 63
          jamonWriter.write("\r\n            <section>\r\n              <h2><a name=\"rsgroup\">RSGroup</a></h2>\r\n              ");
          // 231, 15
          {
            org.apache.hadoop.hbase.tmpl.master.RSGroupListTmpl __jamon__var_2 = new org.apache.hadoop.hbase.tmpl.master.RSGroupListTmpl(this.getTemplateManager());
            __jamon__var_2.renderNoFlush(jamonWriter, master, serverManager);
          }
          // 231, 81
          jamonWriter.write("\r\n            </section>\r\n          ");
        }
        // 233, 17
        jamonWriter.write("\r\n        ");
      }
      // 234, 15
      jamonWriter.write("\r\n        <section>\r\n            <h2><a name=\"regionservers\">Region Servers</a></h2>\r\n            ");
      // 237, 13
      {
        org.apache.hadoop.hbase.tmpl.master.RegionServerListTmpl __jamon__var_3 = new org.apache.hadoop.hbase.tmpl.master.RegionServerListTmpl(this.getTemplateManager());
        __jamon__var_3.setServers(servers );
        __jamon__var_3.renderNoFlush(jamonWriter, master);
      }
      // 237, 74
      jamonWriter.write("\r\n\r\n            ");
      // 239, 13
      if ((deadServers != null) )
      {
        // 239, 42
        jamonWriter.write("\r\n                ");
        // 240, 17
        {
          // 240, 17
          __jamon_innerUnit__deadRegionServers(jamonWriter);
        }
        // 240, 40
        jamonWriter.write("\r\n            ");
      }
      // 241, 19
      jamonWriter.write("\r\n        </section>\r\n        <section>\r\n            ");
      // 244, 13
      {
        org.apache.hadoop.hbase.tmpl.master.BackupMasterStatusTmpl __jamon__var_4 = new org.apache.hadoop.hbase.tmpl.master.BackupMasterStatusTmpl(this.getTemplateManager());
        __jamon__var_4.renderNoFlush(jamonWriter, master );
      }
      // 244, 58
      jamonWriter.write("\r\n        </section>\r\n        <section>\r\n            <h2><a name=\"tables\">Tables</a></h2>\r\n            <div class=\"tabbable\">\r\n                <ul class=\"nav nav-pills\">\r\n                    <li class=\"active\">\r\n                        <a href=\"#tab_userTables\" data-toggle=\"tab\">User Tables</a>\r\n                    </li>\r\n                    <li class=\"\">\r\n                        <a href=\"#tab_catalogTables\" data-toggle=\"tab\">System Tables</a>\r\n                    </li>\r\n                    <li class=\"\">\r\n                        <a href=\"#tab_userSnapshots\" data-toggle=\"tab\">Snapshots</a>\r\n                    </li>\r\n                </ul>\r\n                <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\r\n                    <div class=\"tab-pane active\" id=\"tab_userTables\">\r\n                        ");
      // 262, 25
      if ((metaLocation != null) )
      {
        // 262, 55
        jamonWriter.write("\r\n                            ");
        // 263, 29
        {
          // 263, 29
          __jamon_innerUnit__userTables(jamonWriter);
        }
        // 263, 45
        jamonWriter.write("\r\n                        ");
      }
      // 264, 31
      jamonWriter.write("\r\n                    </div>\r\n                    <div class=\"tab-pane\" id=\"tab_catalogTables\">\r\n                        ");
      // 267, 25
      if ((metaLocation != null) )
      {
        // 267, 55
        jamonWriter.write("\r\n                            ");
        // 268, 29
        {
          // 268, 29
          __jamon_innerUnit__catalogTables(jamonWriter);
        }
        // 268, 48
        jamonWriter.write("\r\n                        ");
      }
      // 269, 31
      jamonWriter.write("\r\n                    </div>\r\n                    <div class=\"tab-pane\" id=\"tab_userSnapshots\">\r\n                        ");
      // 272, 25
      {
        // 272, 25
        __jamon_innerUnit__userSnapshots(jamonWriter);
      }
      // 272, 44
      jamonWriter.write("\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        <section>\r\n            <h2><a name=\"peers\">Peers</a></h2>\r\n            ");
      // 279, 13
      {
        // 279, 13
        __jamon_innerUnit__peerConfigs(jamonWriter);
      }
      // 279, 30
      jamonWriter.write("\r\n        </section>\r\n\t");
    }
    // 281, 2
    else
    {
      // 281, 9
      jamonWriter.write("\r\n        <section>\r\n            ");
      // 283, 13
      {
        org.apache.hadoop.hbase.tmpl.master.BackupMasterStatusTmpl __jamon__var_5 = new org.apache.hadoop.hbase.tmpl.master.BackupMasterStatusTmpl(this.getTemplateManager());
        __jamon__var_5.renderNoFlush(jamonWriter, master );
      }
      // 283, 58
      jamonWriter.write("\r\n        </section>\r\n\t");
    }
    // 285, 8
    jamonWriter.write("\r\n\r\n\r\n        <section>\r\n            ");
    // 289, 13
    {
      org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl __jamon__var_6 = new org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl(this.getTemplateManager());
      __jamon__var_6.setFilter(filter);
      __jamon__var_6.setParent("/master-status" );
      __jamon__var_6.renderNoFlush(jamonWriter);
    }
    // 289, 88
    jamonWriter.write("\r\n        </section>\r\n\r\n        <section>\r\n            <h2><a name=\"attributes\">Software Attributes</a></h2>\r\n            <table id=\"attributes_table\" class=\"table table-striped\">\r\n                <tr>\r\n                    <th>Attribute Name</th>\r\n                    <th>Value</th>\r\n                    <th>Description</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>HBase Version</td>\r\n                    <td>");
    // 302, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getVersion()), jamonWriter);
    // 302, 84
    jamonWriter.write(", revision=");
    // 302, 95
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getRevision()), jamonWriter);
    // 302, 155
    jamonWriter.write("</td><td>HBase version and revision</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HBase Compiled</td>\r\n                    <td>");
    // 306, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getDate()), jamonWriter);
    // 306, 81
    jamonWriter.write(", ");
    // 306, 83
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getUser()), jamonWriter);
    // 306, 139
    jamonWriter.write("</td>\r\n                    <td>When HBase version was compiled and by whom</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HBase Source Checksum</td>\r\n                    <td>");
    // 311, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getSrcChecksum()), jamonWriter);
    // 311, 88
    jamonWriter.write("</td>\r\n                    <td>HBase source SHA512 checksum</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Hadoop Version</td>\r\n                    <td>");
    // 316, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getVersion()), jamonWriter);
    // 316, 78
    jamonWriter.write(", revision=");
    // 316, 89
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getRevision()), jamonWriter);
    // 316, 143
    jamonWriter.write("</td>\r\n                    <td>Hadoop version and revision</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Hadoop Compiled</td>\r\n                    <td>");
    // 321, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getDate()), jamonWriter);
    // 321, 75
    jamonWriter.write(", ");
    // 321, 77
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getUser()), jamonWriter);
    // 321, 127
    jamonWriter.write("</td>\r\n                    <td>When Hadoop version was compiled and by whom</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Hadoop Source Checksum</td>\r\n                    <td>");
    // 326, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getSrcChecksum()), jamonWriter);
    // 326, 82
    jamonWriter.write("</td>\r\n                    <td>Hadoop source MD5 checksum</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>ZooKeeper Client Version</td>\r\n                    <td>");
    // 331, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.zookeeper.Version.getVersion()), jamonWriter);
    // 331, 72
    jamonWriter.write(", revision=");
    // 331, 83
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.zookeeper.Version.getRevision()), jamonWriter);
    // 331, 131
    jamonWriter.write("</td>\r\n                    <td>ZooKeeper client version and revision</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>ZooKeeper Client Compiled</td>\r\n                    <td>");
    // 336, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.zookeeper.Version.getBuildDate()), jamonWriter);
    // 336, 74
    jamonWriter.write("</td>\r\n                    <td>When ZooKeeper client version was compiled</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>ZooKeeper Quorum</td>\r\n                    <td> ");
    // 342, 26
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(formatZKString()), jamonWriter);
    // 342, 48
    jamonWriter.write(" </td>\r\n                    <td>Addresses of all registered ZK servers. For more, see <a href=\"/zk.jsp\">zk dump</a>.</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>ZooKeeper Base Path</td>\r\n                    <td> ");
    // 347, 26
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getZooKeeper().getZNodePaths().baseZNode), jamonWriter);
    // 347, 79
    jamonWriter.write("</td>\r\n                    <td>Root node of this cluster in ZK.</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Cluster Key</td>\r\n                    <td> ");
    // 352, 26
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(formatZKString()), jamonWriter);
    // 352, 48
    jamonWriter.write(":");
    // 352, 49
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getZooKeeper().getZNodePaths().baseZNode), jamonWriter);
    // 352, 102
    jamonWriter.write("</td>\r\n                    <td>Key to add this cluster as a peer for replication. Use 'help \"add_peer\"' in the shell for details.</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HBase Root Directory</td>\r\n                    <td>");
    // 357, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(FSUtils.getRootDir(master.getConfiguration()).toString()), jamonWriter);
    // 357, 87
    jamonWriter.write("</td>\r\n                    <td>Location of HBase home directory</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HMaster Start Time</td>\r\n                    <td>");
    // 362, 25
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(new Date(master.getMasterStartTime())), jamonWriter);
    // 362, 68
    jamonWriter.write("</td>\r\n                    <td>Date stamp of when this HMaster was started</td>\r\n                </tr>\r\n                ");
    // 365, 17
    if (master.isActiveMaster() )
    {
      // 365, 48
      jamonWriter.write("\r\n\t                <tr>\r\n\t                    <td>HMaster Active Time</td>\r\n\t                    <td>");
      // 368, 26
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(new Date(master.getMasterActiveTime())), jamonWriter);
      // 368, 70
      jamonWriter.write("</td>\r\n\t                    <td>Date stamp of when this HMaster became active</td>\r\n\t                </tr>\r\n\t                <tr>\r\n\t                    <td>HBase Cluster ID</td>\r\n\t                    <td>");
      // 373, 26
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getClusterId() != null ? master.getClusterId() : "Not set"), jamonWriter);
      // 373, 97
      jamonWriter.write("</td>\r\n\t                    <td>Unique identifier generated for each HBase cluster</td>\r\n\t                </tr>\r\n\t                <tr>\r\n\t                    <td>Load average</td>\r\n\t                    <td>");
      // 378, 26
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerManager() == null ? "0.00" :
	                      StringUtils.limitDecimalTo2(master.getServerManager().getAverageLoad())), jamonWriter);
      // 379, 98
      jamonWriter.write("</td>\r\n\t                    <td>Average number of regions per regionserver. Naive computation.</td>\r\n\t                </tr>\r\n\t                ");
      // 382, 18
      if (frags != null )
      {
        // 382, 39
        jamonWriter.write("\r\n\t                <tr>\r\n\t                    <td>Fragmentation</td>\r\n\t                    <td>");
        // 385, 26
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(frags.get("-TOTAL-") != null ? frags.get("-TOTAL-").intValue() + "%" : "n/a"), jamonWriter);
        // 385, 108
        jamonWriter.write("</td>\r\n\t                    <td>Overall fragmentation of all tables, including hbase:meta</td>\r\n\t                </tr>\r\n\t                ");
      }
      // 388, 24
      jamonWriter.write("\r\n\t                <tr>\r\n\t                    <td>Coprocessors</td>\r\n\t                    <td>");
      // 391, 26
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getMasterCoprocessorHost() == null ? "[]" :
	                      java.util.Arrays.toString(master.getMasterCoprocessors())), jamonWriter);
      // 392, 84
      jamonWriter.write("</td>\r\n\t                    <td>Coprocessors currently loaded by the master</td>\r\n\t                </tr>\r\n\t                <tr>\r\n\t                    <td>LoadBalancer</td>\r\n\t                    <td>");
      // 397, 26
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(master.getLoadBalancerClassName()), jamonWriter);
      // 397, 65
      jamonWriter.write("</td>\r\n\t                    <td>LoadBalancer to be used in the Master</td>\r\n\t                </tr>\r\n                ");
    }
    // 400, 23
    jamonWriter.write("\r\n            </table>\r\n        </section>\r\n        </div>\r\n    </div> <!-- /container -->\r\n\r\n    <script src=\"/static/js/jquery.min.js\" type=\"text/javascript\"></script>\r\n    <script src=\"/static/js/jquery.tablesorter.min.js\" type=\"text/javascript\"></script>\r\n    <script src=\"/static/js/bootstrap.min.js\" type=\"text/javascript\"></script>\r\n    <script src=\"/static/js/tab.js\" type=\"text/javascript\"></script>\r\n    <script>\r\n    $(document).ready(function()\r\n        {\r\n            $.tablesorter.addParser(\r\n            {\r\n                id: 'filesize',\r\n                is: function(s) {\r\n                    return s.match(new RegExp( /([\\.0-9]+)\\ (B|KB|MB|GB|TB)/ ));\r\n                },\r\n                format: function(s) {\r\n                    var suf = s.match(new RegExp( /(KB|B|GB|MB|TB)$/ ))[1];\r\n                    var num = parseFloat(s.match( new RegExp( /([\\.0-9]+)\\ (B|KB|MB|GB|TB)/ ))[0]);\r\n                    switch(suf) {\r\n                        case 'B':\r\n                            return num;\r\n                        case 'KB':\r\n                           return num * 1024;\r\n                        case 'MB':\r\n                            return num * 1024 * 1024;\r\n                        case 'GB':\r\n                            return num * 1024 * 1024 * 1024;\r\n                        case 'TB':\r\n                            return num * 1024 * 1024 * 1024 * 1024;\r\n                    }\r\n                },\r\n                type: 'numeric'\r\n            });\r\n            $.tablesorter.addParser(\r\n            {\r\n                id: \"separator\",\r\n                is: function (s) {\r\n                    return /^[0-9]?[0-9,]*$/.test(s);\r\n                }, format: function (s) {\r\n                    return $.tablesorter.formatFloat( s.replace(/,/g,'') );\r\n                }, type: \"numeric\"\r\n            });\r\n            $(\"#baseStatsTable\").tablesorter({\r\n                headers: {\r\n                    4: {sorter: 'separator'},\r\n                    5: {sorter: 'separator'}\r\n                }\r\n            });\r\n            $(\"#memoryStatsTable\").tablesorter({\r\n                headers: {\r\n                    1: {sorter: 'filesize'},\r\n                    2: {sorter: 'filesize'},\r\n                    3: {sorter: 'filesize'}\r\n                }\r\n            });\r\n            $(\"#requestStatsTable\").tablesorter({\r\n                headers: {\r\n                    1: {sorter: 'separator'},\r\n                    2: {sorter: 'separator'},\r\n                    3: {sorter: 'separator'},\r\n                    4: {sorter: 'separator'}\r\n                }\r\n            });\r\n            $(\"#storeStatsTable\").tablesorter({\r\n                headers: {\r\n                    1: {sorter: 'separator'},\r\n                    2: {sorter: 'separator'},\r\n                    3: {sorter: 'filesize'},\r\n                    4: {sorter: 'filesize'},\r\n                    5: {sorter: 'filesize'},\r\n                    6: {sorter: 'filesize'}\r\n                }\r\n            });\r\n            $(\"#compactionStatsTable\").tablesorter({\r\n                headers: {\r\n                    1: {sorter: 'separator'},\r\n                    2: {sorter: 'separator'},\r\n                    3: {sorter: 'separator'}\r\n                }\r\n            });\r\n\r\n            $(\"#userTables\").tablesorter();\r\n        }\r\n    );\r\n    </script>\r\n  </body>\r\n</html>\r\n\r\n");
  }
  
  
  // 492, 1
  private void __jamon_innerUnit__catalogTables(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 493, 1
    
 List<TableDescriptor> sysTables = master.isInitialized() ?
   master.listTableDescriptorsByNamespace(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR) : null;

    // 497, 1
    if ((sysTables != null && sysTables.size() > 0))
    {
      // 497, 51
      jamonWriter.write("\r\n<table class=\"table table-striped\">\r\n<tr>\r\n    <th>Table Name</th>\r\n    ");
      // 501, 5
      if ((frags != null) )
      {
        // 501, 28
        jamonWriter.write("\r\n        <th title=\"Fragmentation - Will be 0% after a major compaction and fluctuate during normal usage.\">Frag.</th>\r\n    ");
      }
      // 503, 11
      jamonWriter.write("\r\n    <th>Description</th>\r\n</tr>\r\n");
      // 506, 1
      for (TableDescriptor systemTable : sysTables)
      {
        // 506, 48
        jamonWriter.write("\r\n<tr>\r\n");
        // 508, 1
        TableName tableName = systemTable.getTableName();
        // 509, 5
        jamonWriter.write("<td><a href=\"table.jsp?name=");
        // 509, 33
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName), jamonWriter);
        // 509, 48
        jamonWriter.write("\">");
        // 509, 50
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName), jamonWriter);
        // 509, 65
        jamonWriter.write("</a></td>\r\n    ");
        // 510, 5
        if ((frags != null))
        {
          // 510, 27
          jamonWriter.write("\r\n        <td align=\"center\">");
          // 511, 28
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(frags.get(tableName.getNameAsString()) != null ? frags.get(tableName.getNameAsString())
        .intValue() + "%" : "n/a"), jamonWriter);
          // 512, 37
          jamonWriter.write("</td>\r\n    ");
        }
        // 513, 11
        jamonWriter.write("\r\n    ");
        // 514, 5
        String description = null;
        if (tableName.equals(TableName.META_TABLE_NAME)){
            description = "The hbase:meta table holds references to all User Table regions.";
        } else if (tableName.equals(CanaryTool.DEFAULT_WRITE_TABLE_NAME)){
            description = "The hbase:canary table is used to sniff the write availbility of"
              + " each regionserver.";
        } else if (tableName.equals(PermissionStorage.ACL_TABLE_NAME)){
            description = "The hbase:acl table holds information about acl.";
        } else if (tableName.equals(VisibilityConstants.LABELS_TABLE_NAME)){
            description = "The hbase:labels table holds information about visibility labels.";
        } else if (tableName.equals(QuotaUtil.QUOTA_TABLE_NAME)){
            description = "The hbase:quota table holds quota information about number" +
            " or size of requests in a given time frame.";
        } else if (tableName.equals(TableName.valueOf("hbase:rsgroup"))){
            description = "The hbase:rsgroup table holds information about regionserver groups.";
        } else if (tableName.equals(TableName.valueOf("hbase:replication"))) {
            description = "The hbase:replication table tracks cross cluster replication through " +
            "WAL file offsets.";
        }
    
        // 534, 5
        jamonWriter.write("<td>");
        // 534, 9
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(description), jamonWriter);
        // 534, 26
        jamonWriter.write("</td>\r\n</tr>\r\n");
      }
      // 536, 8
      jamonWriter.write("\r\n</table>\r\n");
    }
    // 538, 7
    jamonWriter.write("\r\n");
  }
  
  
  // 654, 1
  private void __jamon_innerUnit__deadRegionServers(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 656, 1
    if ((deadServers != null && deadServers.size() > 0))
    {
      // 656, 55
      jamonWriter.write("\r\n<h2>Dead Region Servers</h2>\r\n<table class=\"table table-striped\">\r\n    <tr>\r\n        <th></th>\r\n        <th>ServerName</th>\r\n        <th>Stop time</th>\r\n    </tr>\r\n    ");
      // 664, 5
      
       DeadServer deadServerUtil = master.getServerManager().getDeadServers();
       ServerName [] deadServerNames = deadServers.toArray(new ServerName[deadServers.size()]);
         Arrays.sort(deadServerNames);
         for (ServerName deadServerName: deadServerNames) {
    
      // 670, 5
      jamonWriter.write("<tr>\r\n    \t<th></th>\r\n        <td>");
      // 672, 13
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(deadServerName), jamonWriter);
      // 672, 33
      jamonWriter.write("</td>\r\n        <td>");
      // 673, 13
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(deadServerUtil.getTimeOfDeath(deadServerName)), jamonWriter);
      // 673, 64
      jamonWriter.write("</td>\r\n    </tr>\r\n    ");
      // 675, 5
      
        }
    
      // 678, 5
      jamonWriter.write("<tr>\r\n        <th>Total: </th>\r\n        <td>servers: ");
      // 680, 22
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(deadServers.size()), jamonWriter);
      // 680, 46
      jamonWriter.write("</td>\r\n        <th></th>\r\n    </tr>\r\n</table>\r\n");
    }
    // 684, 7
    jamonWriter.write("\r\n");
  }
  
  
  // 687, 1
  private void __jamon_innerUnit__peerConfigs(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 688, 1
    
    List<ReplicationPeerDescription> peers = null;
    if (master.getReplicationPeerManager() != null) {
        peers = master.getReplicationPeerManager().listPeers(null);
    }

    // 694, 1
    jamonWriter.write("<table class=\"table table-striped\">\r\n    <tr>\r\n        <th>Peer Id</th>\r\n        <th>Cluster Key</th>\r\n        <th>Endpoint</th>\r\n        <th>State</th>\r\n        <th>IsSerial</th>\r\n        <th>Remote WAL</th>\r\n        <th>Sync Replication State</th>\r\n        <th>Bandwidth</th>\r\n        <th>ReplicateAll</th>\r\n        <th>Namespaces</th>\r\n        <th>Exclude Namespaces</th>\r\n        <th>Table Cfs</th>\r\n        <th>Exclude Table Cfs</th>\r\n    </tr>\r\n");
    // 710, 1
    if ((peers != null && peers.size() > 0))
    {
      // 710, 43
      jamonWriter.write("\r\n    ");
      // 711, 5
      for (ReplicationPeerDescription peer : peers )
      {
        // 711, 53
        jamonWriter.write("\r\n    ");
        // 712, 5
        
        String peerId = peer.getPeerId();
        ReplicationPeerConfig peerConfig = peer.getPeerConfig();
    
        // 716, 5
        jamonWriter.write("<tr>\r\n        <td>");
        // 717, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerId), jamonWriter);
        // 717, 25
        jamonWriter.write("</td>\r\n        <td>");
        // 718, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getClusterKey()), jamonWriter);
        // 718, 45
        jamonWriter.write("</td>\r\n        <td>");
        // 719, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getReplicationEndpointImpl()), jamonWriter);
        // 719, 58
        jamonWriter.write("</td>\r\n        <td>");
        // 720, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peer.isEnabled() ? "ENABLED" : "DISABLED"), jamonWriter);
        // 720, 60
        jamonWriter.write("</td>\r\n        <td>");
        // 721, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.isSerial()), jamonWriter);
        // 721, 40
        jamonWriter.write("</td>\r\n        <td>");
        // 722, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getRemoteWALDir() == null ? "" : peerConfig.getRemoteWALDir()), jamonWriter);
        // 722, 91
        jamonWriter.write("\r\n        <td>");
        // 723, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peer.getSyncReplicationState()), jamonWriter);
        // 723, 49
        jamonWriter.write("\r\n        <td>");
        // 724, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getBandwidth() == 0? "UNLIMITED" : StringUtils.humanReadableInt(peerConfig.getBandwidth())), jamonWriter);
        // 724, 120
        jamonWriter.write("</td>\r\n        <td>");
        // 725, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.replicateAllUserTables()), jamonWriter);
        // 725, 54
        jamonWriter.write("</td>\r\n        <td>\r\n           ");
        // 727, 12
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getNamespaces() == null ? "" : ReplicationPeerConfigUtil.convertToString(peerConfig.getNamespaces()).replaceAll(";", "; ")), jamonWriter);
        // 727, 151
        jamonWriter.write("\r\n        </td>\r\n        <td>\r\n            ");
        // 730, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getExcludeNamespaces() == null ? "" : ReplicationPeerConfigUtil.convertToString(peerConfig.getExcludeNamespaces()).replaceAll(";", "; ")), jamonWriter);
        // 730, 166
        jamonWriter.write("\r\n        </td>\r\n        <td>\r\n           ");
        // 733, 12
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getTableCFsMap() == null ? "" : ReplicationPeerConfigUtil.convertToString(peerConfig.getTableCFsMap()).replaceAll(";", "; ")), jamonWriter);
        // 733, 153
        jamonWriter.write("\r\n        </td>\r\n        <td>\r\n           ");
        // 736, 12
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(peerConfig.getExcludeTableCFsMap() == null ? "" : ReplicationPeerConfigUtil.convertToString(peerConfig.getExcludeTableCFsMap()).replaceAll(";", "; ")), jamonWriter);
        // 736, 167
        jamonWriter.write("\r\n        </td>\r\n    </tr>\r\n    ");
      }
      // 739, 12
      jamonWriter.write("\r\n");
    }
    // 740, 7
    jamonWriter.write("\r\n<tr><td>Total: ");
    // 741, 16
    org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf((peers != null) ? peers.size() : 0), jamonWriter);
    // 741, 56
    jamonWriter.write("</td></tr>\r\n</table>\r\n");
  }
  
  
  // 625, 1
  private void __jamon_innerUnit__userSnapshots(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 626, 1
    
   List<SnapshotDescription> snapshots = master.isInitialized() ?
     master.getSnapshotManager().getCompletedSnapshots() : null;

    // 630, 1
    if ((snapshots != null && snapshots.size() > 0))
    {
      // 630, 51
      jamonWriter.write("\r\n<table class=\"table table-striped\">\r\n    <tr>\r\n        <th>Snapshot Name</th>\r\n        <th>Table</th>\r\n        <th>Creation Time</th>\r\n    </tr>\r\n    ");
      // 637, 5
      for (SnapshotDescription snapshotDesc : snapshots)
      {
        // 637, 57
        jamonWriter.write("\r\n    ");
        // 638, 5
        
        TableName snapshotTable = TableName.valueOf(snapshotDesc.getTable());
    
        // 641, 5
        jamonWriter.write("<tr>\r\n        <td><a href=\"snapshot.jsp?name=");
        // 642, 40
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getName()), jamonWriter);
        // 642, 68
        jamonWriter.write("\">");
        // 642, 70
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(snapshotDesc.getName()), jamonWriter);
        // 642, 98
        jamonWriter.write("</a> </td>\r\n        <td><a href=\"table.jsp?name=");
        // 643, 37
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(snapshotTable.getNameAsString()), jamonWriter);
        // 643, 74
        jamonWriter.write("\">");
        // 643, 76
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(snapshotTable.getNameAsString()), jamonWriter);
        // 643, 113
        jamonWriter.write("</a>\r\n        </td>\r\n        <td>");
        // 645, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(new Date(snapshotDesc.getCreationTime())), jamonWriter);
        // 645, 59
        jamonWriter.write("</td>\r\n    </tr>\r\n    ");
      }
      // 647, 12
      jamonWriter.write("\r\n    <p>");
      // 648, 8
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(snapshots.size()), jamonWriter);
      // 648, 30
      jamonWriter.write(" snapshot(s) in set. [<a href=\"/snapshotsStats.jsp\">Snapshot Storefile stats</a>]</p>\r\n</table>\r\n");
    }
    // 650, 7
    jamonWriter.write("\r\n");
  }
  
  
  // 541, 1
  private void __jamon_innerUnit__userTables(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 542, 1
    
   List<TableDescriptor> tables = new ArrayList<TableDescriptor>();
   String errorMessage = getUserTables(master, tables);

    // 546, 1
    if ((tables.size() == 0 && errorMessage != null))
    {
      // 546, 52
      jamonWriter.write("\r\n<p> ");
      // 547, 5
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(errorMessage), jamonWriter);
      // 547, 23
      jamonWriter.write(" </p>\r\n");
    }
    // 548, 7
    jamonWriter.write("\r\n\r\n");
    // 550, 1
    if ((tables != null && tables.size() > 0))
    {
      // 550, 45
      jamonWriter.write("\r\n<table id=\"userTables\" class=\"tablesorter table table-striped\">\r\n<thead>\r\n    <tr>\r\n        <th style=\"vertical-align: middle;\" rowspan=\"2\">Namespace</th>\r\n        <th style=\"vertical-align: middle;\" rowspan=\"2\">Name</th>\r\n        ");
      // 556, 9
      if ((frags != null) )
      {
        // 556, 32
        jamonWriter.write("\r\n            <th title=\"Fragmentation - Will be 0% after a major compaction and fluctuate during normal usage.\">Frag.</th>\r\n        ");
      }
      // 558, 15
      jamonWriter.write("\r\n        <th style=\"vertical-align:middle;\" rowspan=\"2\">State</th>\r\n        <th style=\"text-align: center\" colspan=\"8\">Regions</th>\r\n        <th style=\"vertical-align:middle;\" rowspan=\"2\">Description</th>\r\n    </tr>\r\n    <tr>\r\n        <th>OPEN</th>\r\n        <th>OPENING</th>\r\n        <th>CLOSED</th>\r\n        <th>CLOSING</th>\r\n        <th>OFFLINE</th>\r\n        <th>FAILED</th>\r\n        <th>SPLIT</th>\r\n        <th>Other</th>\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    ");
      // 575, 5
      for (TableDescriptor desc : tables)
      {
        // 575, 42
        jamonWriter.write("\r\n    ");
        // 576, 5
        
      HTableDescriptor htDesc = new HTableDescriptor(desc);
      TableName tableName = htDesc.getTableName();
      TableState tableState = master.getTableStateManager().getTableState(tableName);
      Map<RegionState.State, List<RegionInfo>> tableRegions =
          master.getAssignmentManager().getRegionStates()
            .getRegionByStateOfTable(tableName);
      int openRegionsCount = tableRegions.get(RegionState.State.OPEN).size();
      int openingRegionsCount = tableRegions.get(RegionState.State.OPENING).size();
      int closedRegionsCount = tableRegions.get(RegionState.State.CLOSED).size();
      int closingRegionsCount = tableRegions.get(RegionState.State.CLOSING).size();
      int offlineRegionsCount = tableRegions.get(RegionState.State.OFFLINE).size();
      int splitRegionsCount = tableRegions.get(RegionState.State.SPLIT).size();
      int failedRegionsCount = tableRegions.get(RegionState.State.FAILED_OPEN).size()
             + tableRegions.get(RegionState.State.FAILED_CLOSE).size();
      int otherRegionsCount = 0;
      for (List<RegionInfo> list: tableRegions.values()) {
         otherRegionsCount += list.size();
      }
      // now subtract known states
      otherRegionsCount = otherRegionsCount - openRegionsCount
                     - failedRegionsCount - offlineRegionsCount
                     - splitRegionsCount - openingRegionsCount
                     - closedRegionsCount - closingRegionsCount;
    
        // 601, 5
        jamonWriter.write("<tr>\r\n        <td>");
        // 602, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName.getNamespaceAsString()), jamonWriter);
        // 602, 51
        jamonWriter.write("</td>\r\n        <td><a href=table.jsp?name=");
        // 603, 36
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName.getNameAsString()), jamonWriter);
        // 603, 69
        jamonWriter.write(">");
        // 603, 70
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName.getQualifierAsString()), jamonWriter);
        // 603, 108
        jamonWriter.write("</a> </td>\r\n        ");
        // 604, 9
        if ((frags != null) )
        {
          // 604, 32
          jamonWriter.write("\r\n            <td align=\"center\">");
          // 605, 32
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(frags.get(tableName.getNameAsString()) != null ? frags.get(tableName.getNameAsString()).intValue() + "%" : "n/a"), jamonWriter);
          // 605, 150
          jamonWriter.write("</td>\r\n        ");
        }
        // 606, 15
        jamonWriter.write("\r\n        <td>");
        // 607, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableState.getState()), jamonWriter);
        // 607, 40
        jamonWriter.write("</td>\r\n        <td>");
        // 608, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(openRegionsCount), jamonWriter);
        // 608, 35
        jamonWriter.write("</td>\r\n        ");
        // 609, 9
        if ((openingRegionsCount > 0) )
        {
          // 609, 42
          jamonWriter.write(" <td><a href=\"/rits.jsp?table=");
          // 609, 72
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName.getNameAsString()), jamonWriter);
          // 609, 105
          jamonWriter.write("&state=OPENING\">");
          // 609, 121
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(openingRegionsCount), jamonWriter);
          // 609, 146
          jamonWriter.write("</td> ");
        }
        // 609, 152
        else
        {
          // 609, 159
          jamonWriter.write("<td>");
          // 609, 163
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(openingRegionsCount), jamonWriter);
          // 609, 188
          jamonWriter.write("</td> ");
        }
        // 609, 200
        jamonWriter.write("\r\n        <td>");
        // 610, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(closedRegionsCount), jamonWriter);
        // 610, 37
        jamonWriter.write("</td>\r\n        ");
        // 611, 9
        if ((closingRegionsCount > 0) )
        {
          // 611, 42
          jamonWriter.write(" <td><a href=\"/rits.jsp?table=");
          // 611, 72
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tableName.getNameAsString()), jamonWriter);
          // 611, 105
          jamonWriter.write("&state=CLOSING\">");
          // 611, 121
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(closingRegionsCount), jamonWriter);
          // 611, 146
          jamonWriter.write("</td> ");
        }
        // 611, 152
        else
        {
          // 611, 159
          jamonWriter.write("<td>");
          // 611, 163
          org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(closingRegionsCount), jamonWriter);
          // 611, 188
          jamonWriter.write("</td> ");
        }
        // 611, 200
        jamonWriter.write("\r\n        <td>");
        // 612, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(offlineRegionsCount), jamonWriter);
        // 612, 38
        jamonWriter.write("</td>\r\n        <td>");
        // 613, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(failedRegionsCount), jamonWriter);
        // 613, 37
        jamonWriter.write("</td>\r\n        <td>");
        // 614, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(splitRegionsCount), jamonWriter);
        // 614, 36
        jamonWriter.write("</td>\r\n        <td>");
        // 615, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(otherRegionsCount), jamonWriter);
        // 615, 36
        jamonWriter.write("</td>\r\n        <td>");
        // 616, 13
        org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.toStringCustomizedValues()), jamonWriter);
        // 616, 52
        jamonWriter.write("</td>\r\n    </tr>\r\n    ");
      }
      // 618, 12
      jamonWriter.write("\r\n    <p>");
      // 619, 8
      org.jamon.escaping.Escaping.NONE.write(org.jamon.emit.StandardEmitter.valueOf(tables.size()), jamonWriter);
      // 619, 27
      jamonWriter.write(" table(s) in set. [<a href=tablesDetailed.jsp>Details</a>]</p>\r\n</tbody>\r\n</table>\r\n");
    }
    // 622, 7
    jamonWriter.write("\r\n");
  }
  
  
}
