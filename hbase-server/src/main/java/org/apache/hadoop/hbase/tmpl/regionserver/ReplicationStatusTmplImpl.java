// Autogenerated Jamon implementation
// /root/apps/test/jamon-dist-2013.12.28/./jamon/org/apache/hadoop/hbase/tmpl/regionserver/ReplicationStatusTmpl.jamon

package org.apache.hadoop.hbase.tmpl.regionserver;

// 23, 9
import java.util.*;
// 24, 9
import java.util.Map.Entry;
// 25, 9
import org.apache.hadoop.hbase.procedure2.util.StringUtils;
// 26, 9
import org.apache.hadoop.hbase.regionserver.HRegionServer;
// 27, 9
import org.apache.hadoop.hbase.replication.regionserver.ReplicationStatus;

public class ReplicationStatusTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.regionserver.ReplicationStatusTmpl.Intf

{
  private final HRegionServer regionServer;
  protected static org.apache.hadoop.hbase.tmpl.regionserver.ReplicationStatusTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.regionserver.ReplicationStatusTmpl.ImplData p_implData)
  {
    return p_implData;
  }
  public ReplicationStatusTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.regionserver.ReplicationStatusTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    regionServer = p_implData.getRegionServer();
  }
  
  @Override public void renderNoFlush(final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 30, 1
    
        Map<String, ReplicationStatus> walGroupsReplicationStatus = regionServer.getWalGroupsReplicationStatus();

    // 34, 1
    if ((walGroupsReplicationStatus != null && walGroupsReplicationStatus.size() > 0) )
    {
      // 34, 86
      jamonWriter.write("\r\n\r\n    <div class=\"tabbable\">\r\n        <ul class=\"nav nav-pills\">\r\n            <li class=\"active\"><a href=\"#tab_currentLog\" data-toggle=\"tab\">Current Log</a> </li>\r\n            <li class=\"\"><a href=\"#tab_replicationDelay\" data-toggle=\"tab\">Replication Delay</a></li>\r\n        </ul>\r\n        <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\r\n            <div class=\"tab-pane active\" id=\"tab_currentLog\">\r\n                ");
      // 43, 17
      {
        // 43, 17
        __jamon_innerUnit__currentLog(jamonWriter, walGroupsReplicationStatus);
      }
      // 43, 72
      jamonWriter.write("\r\n            </div>\r\n            <div class=\"tab-pane\" id=\"tab_replicationDelay\">\r\n                ");
      // 46, 17
      {
        // 46, 17
        __jamon_innerUnit__replicationDelay(jamonWriter, walGroupsReplicationStatus);
      }
      // 46, 78
      jamonWriter.write("\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <p> If the replication delay is UNKNOWN, that means this walGroup doesn't start replicate yet and it may get disabled.\r\n    If the size of log is 0, it means we are replicating current HLog, thus we can't get accurate size since it's not closed yet.</p>\r\n\r\n");
    }
    // 53, 1
    else
    {
      // 53, 8
      jamonWriter.write("\r\n    <p>No Replication Metrics for Peers</p>\r\n");
    }
    // 55, 7
    jamonWriter.write("\r\n\r\n");
  }
  
  
  // 57, 1
  private void __jamon_innerUnit__currentLog(final java.io.Writer jamonWriter, final Map<String,ReplicationStatus> metrics)
    throws java.io.IOException
  {
    // 61, 5
    jamonWriter.write("<table class=\"table table-striped\">\r\n        <tr>\r\n            <th>PeerId</th>\r\n            <th>WalGroup</th>\r\n            <th>Current Log</th>\r\n            <th>Size</th>\r\n            <th>Queue Size</th>\r\n            <th>Offset</th>\r\n        </tr>\r\n            ");
    // 70, 13
    for (Map.Entry<String, ReplicationStatus> entry: metrics.entrySet() )
    {
      // 70, 84
      jamonWriter.write("\r\n                 <tr>\r\n                     <td>");
      // 72, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getPeerId()), jamonWriter);
      // 72, 60
      jamonWriter.write("</td>\r\n                     <td>");
      // 73, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getWalGroup()), jamonWriter);
      // 73, 62
      jamonWriter.write("</td>\r\n                     <td>");
      // 74, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getCurrentPath()), jamonWriter);
      // 74, 65
      jamonWriter.write(" </td>\r\n                     <td>");
      // 75, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(StringUtils.humanSize(entry.getValue().getFileSize())), jamonWriter);
      // 75, 85
      jamonWriter.write("</td>\r\n                     <td>");
      // 76, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getQueueSize()), jamonWriter);
      // 76, 63
      jamonWriter.write("</td>\r\n                     <td>");
      // 77, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(StringUtils.humanSize(entry.getValue().getCurrentPosition())), jamonWriter);
      // 77, 92
      jamonWriter.write("</td>\r\n                 </tr>\r\n            ");
    }
    // 79, 20
    jamonWriter.write("\r\n    </table>\r\n");
  }
  
  
  // 83, 1
  private void __jamon_innerUnit__replicationDelay(final java.io.Writer jamonWriter, final Map<String,ReplicationStatus> metrics)
    throws java.io.IOException
  {
    // 87, 5
    jamonWriter.write("<table class=\"table table-striped\">\r\n        <tr>\r\n            <th>PeerId</th>\r\n            <th>WalGroup</th>\r\n            <th>Current Log</th>\r\n            <th>Last Shipped Age</th>\r\n            <th>Replication Delay</th>\r\n        </tr>\r\n            ");
    // 95, 13
    for (Map.Entry<String, ReplicationStatus> entry: metrics.entrySet() )
    {
      // 95, 84
      jamonWriter.write("\r\n                 <tr>\r\n                     <td>");
      // 97, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getPeerId()), jamonWriter);
      // 97, 60
      jamonWriter.write("</td>\r\n                     <td>");
      // 98, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getWalGroup()), jamonWriter);
      // 98, 62
      jamonWriter.write("</td>\r\n                     <td>");
      // 99, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getCurrentPath()), jamonWriter);
      // 99, 65
      jamonWriter.write(" </td>\r\n                     <td>");
      // 100, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(StringUtils.humanTimeDiff(entry.getValue().getAgeOfLastShippedOp())), jamonWriter);
      // 100, 99
      jamonWriter.write("</td>\r\n                     <td>");
      // 101, 26
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(entry.getValue().getReplicationDelay() == Long.MAX_VALUE ? "UNKNOWN" : StringUtils.humanTimeDiff(entry.getValue().getReplicationDelay())), jamonWriter);
      // 101, 168
      jamonWriter.write("</td>\r\n                 </tr>\r\n            ");
    }
    // 103, 20
    jamonWriter.write("\r\n    </table>\r\n");
  }
  
  
}
