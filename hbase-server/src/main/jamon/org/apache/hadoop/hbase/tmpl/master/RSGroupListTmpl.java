// Autogenerated Jamon proxy
// /root/apps/test/jamon-dist-2013.12.28/./jamon/org/apache/hadoop/hbase/tmpl/master/RSGroupListTmpl.jamon

package jamon.org.apache.hadoop.hbase.tmpl.master;

// 27, 5
import java.util.Collections;
// 28, 5
import java.util.List;
// 29, 5
import java.util.Map;
// 30, 5
import java.util.Set;
// 31, 5
import java.util.stream.Collectors;
// 32, 5
import org.apache.hadoop.hbase.master.HMaster;
// 33, 5
import org.apache.hadoop.hbase.RegionMetrics;
// 34, 5
import org.apache.hadoop.hbase.ServerMetrics;
// 35, 5
import org.apache.hadoop.hbase.Size;
// 36, 5
import org.apache.hadoop.hbase.RSGroupTableAccessor;
// 37, 5
import org.apache.hadoop.hbase.master.ServerManager;
// 38, 5
import org.apache.hadoop.hbase.net.Address;
// 39, 5
import org.apache.hadoop.hbase.rsgroup.RSGroupInfo;
// 40, 5
import org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;

@org.jamon.annotations.Template(
  signature = "7D9222DA869F721FABDA6206A97B5374",
  requiredArguments = {
    @org.jamon.annotations.Argument(name = "master", type = "HMaster"),
    @org.jamon.annotations.Argument(name = "serverManager", type = "ServerManager")})
public class RSGroupListTmpl
  extends org.jamon.AbstractTemplateProxy
{
  
  public RSGroupListTmpl(org.jamon.TemplateManager p_manager)
  {
     super(p_manager);
  }
  
  protected RSGroupListTmpl(String p_path)
  {
    super(p_path);
  }
  
  public RSGroupListTmpl()
  {
     super("/jamon/org/apache/hadoop/hbase/tmpl/master/RSGroupListTmpl");
  }
  
  public interface Intf
    extends org.jamon.AbstractTemplateProxy.Intf
  {
    
    void renderNoFlush(final java.io.Writer jamonWriter) throws java.io.IOException;
    
  }
  public static class ImplData
    extends org.jamon.AbstractTemplateProxy.ImplData
  {
    // 22, 1
    public void setMaster(HMaster master)
    {
      // 22, 1
      m_master = master;
    }
    public HMaster getMaster()
    {
      return m_master;
    }
    private HMaster m_master;
    // 23, 1
    public void setServerManager(ServerManager serverManager)
    {
      // 23, 1
      m_serverManager = serverManager;
    }
    public ServerManager getServerManager()
    {
      return m_serverManager;
    }
    private ServerManager m_serverManager;
  }
  @Override
  protected org.jamon.AbstractTemplateProxy.ImplData makeImplData()
  {
    return new ImplData();
  }
  @Override public ImplData getImplData()
  {
    return (ImplData) super.getImplData();
  }
  
  
  @Override
  public org.jamon.AbstractTemplateImpl constructImpl(Class<? extends org.jamon.AbstractTemplateImpl> p_class){
    try
    {
      return p_class
        .getConstructor(new Class [] { org.jamon.TemplateManager.class, ImplData.class })
        .newInstance(new Object [] { getTemplateManager(), getImplData()});
    }
    catch (RuntimeException e)
    {
      throw e;
    }
    catch (Exception e)
    {
      throw new RuntimeException(e);
    }
  }
  
  @Override
  protected org.jamon.AbstractTemplateImpl constructImpl(){
    return new RSGroupListTmplImpl(getTemplateManager(), getImplData());
  }
  public org.jamon.Renderer makeRenderer(final HMaster master, final ServerManager serverManager)
  {
    return new org.jamon.AbstractRenderer() {
      @Override
      public void renderTo(final java.io.Writer jamonWriter)
        throws java.io.IOException
      {
        render(jamonWriter, master, serverManager);
      }
    };
  }
  
  public void render(final java.io.Writer jamonWriter, final HMaster master, final ServerManager serverManager)
    throws java.io.IOException
  {
    renderNoFlush(jamonWriter, master, serverManager);
    jamonWriter.flush();
  }
  public void renderNoFlush(final java.io.Writer jamonWriter, final HMaster master, final ServerManager serverManager)
    throws java.io.IOException
  {
    ImplData implData = getImplData();
    implData.setMaster(master);
    implData.setServerManager(serverManager);
    Intf instance = (Intf) getTemplateManager().constructImpl(this);
    instance.renderNoFlush(jamonWriter);
    reset();
  }
  
  
}
